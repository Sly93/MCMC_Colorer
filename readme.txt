MCMC Colorer
============

The package contains the code for the CPU and GPU version of MCMC Colorer.
Code included in the package is currently under development. We are going to upload the project on a GitHub or GitLab repository, for keeping you up-to-date with the integration and bug fixing.

Compiling
---------
Code has been tested under Linux and Windows 8/10 operating systems, and project files for Visual Studio 2017 (for Windows) and a CMakeLists file are included in the package for ease of compilations.
The project requires a recent Cuda Development Toolkit, which is freely available on NVidia website. Cuda SDK 9 and 10 are reported to be compatible with the project.

Under Linux, compiling requires the cmake utility that, depending on the distribution, can be installed using the proper package management system. As and example, under Ubuntu and derivatives:
	apt-get install cmake
Also, getopt is required and can be installed in the same way.
	apt-get install getopt
For compiling the project, make a folder on the root of the enclosed project, call the cmake utility against the source folder and invoke the make command:
	mkdir build
	cd build
	cmake ../src
	make
Binaries will be compiled into the "build" directory.

Under Windows, a recent version of the Cuda Development Toolkit is also required. The MCMC Colorer package includes a Visual Studio 2017 project file that, in turn, includes three solutions: one for the dataset generator and two for the MCMC Colorer. The two colorer solutions differ for the Cuda toolkit installed in the target machine: we provided support for CUDA 9.2 and the upcoming Cuda 10.0. If required, we can provide more versions, depending on your requests.
Under Windows, compilation is straight forward (just press F7 and hope for the best)

Usage
-----
If compilation is successful, two binary executable will be created:
datasetGen: a simple Erdos graph generator
MCMC_Colorer: the colorer itself

datasetGen generates a random Erdos graph and saves it in a format which is compatible with the colorer. It requires four parameters:
./datasetGen <number_of_nodes> <data_file> <label_file> <edge_probabilty>
- number of nodes: ...
- label file: output filename for the labels (unused in this project, but still required in the executable)
- data file: output filename for the graph
- edge probability: probability of creating an edge between nodes i and j, with 0 < i < number_of_nodes, and 0 < j < number_of_nodes. Being a probability, it is required to be a float number, 0 < p < 1

Data file is a list of unidirected edge, with a single-line header, i.e.
<total number of nodes>	<total number of edges>
node1		node2		edgeWeight
node3		node12		edgeWeight
node4		node2		edgeWeight
node4		node5		edgeWeight
node6		node1		edgeWeight
node6		node8		edgeWeight
.
.
.

MCMC_Colorer is the main executable, and includes code for different colorers:
- Luby, GPU version, implemented for a single CPU thread and a NVidia GPU (kept for reference)
- MCMC, CPU version, implemented for a single thread
- MCMC, GPU version, implemented for a single CPU thread and a NVidia GPU
It can be invoked by:
./MCMC_Colorer --label <label_file> --data <data_file> --gene <gene_file>
- <label_file> a label file generated by the datesetGet utility (unused in this project, but still required in the executable)
- <data_file> a data file generated by the datasetGen utility
- <gene_file> (unused in this project, but still required in the executable) can be a random name

Once the data file has been validated and loaded, the three colorers are invoked in turn, each one printing various statistics about the ongoing processes.
Currently, the generated coloring is not saved on file and gets discarded once compilation ends.


Code details
------------
<work in progress>

